version: "3"
services:

  models:
    image: tp33/django
    container_name: models
    external_links:
      - mysql:db
    volumes:
      - .:/app
    expose:
      - "8001:8000"
    networks:
      - backend
      - service_mesh
    command: bash -c "python ./isa/manage.py migrate && python ./isa/manage.py loaddata ./isa/db.json && python ./isa/manage.py test jersey && mod_wsgi-express start-server --working-directory ./isa --reload-on-changes ./isa/isa/wsgi.py"

  exp:
    image: tp33/django
    container_name: exp
    networks:
      - service_mesh
      - public
    expose:
      - "8002:8000"
    volumes:
      - .:/app
    command: "mod_wsgi-express start-server --working-directory ./exp --reload-on-changes exp/exp/wsgi.py"
    logging:
      driver: "none"


  web:
    image: tp33/django
    container_name: web
    networks:
      - public
    expose:
      - "8000:8000"
    volumes:
      - .:/app
    command: "mod_wsgi-express start-server --working-directory ./web --reload-on-changes web/web/wsgi.py"
  
  web2:
    image: tp33/django
    container_name: web2
    networks:
      - public
    ports:
      - "8003:8000"
    volumes:
      - .:/app
    command: "mod_wsgi-express start-server --working-directory ./web --reload-on-changes web/web/wsgi.py"

  haproxy:
    image: dockercloud/haproxy
    container_name: haproxy
    depends_on:
      - web
    volumes:
      - ./haproxy.cfg:/app/haproxy/haproxy.cfg
    ports:
      - "80:8000"
    networks:
      - public
    logging:
      driver: "none"

  kafka:
   image: spotify/kafka
   container_name: kafka
   networks:
      - batch_network
      - service_mesh
   environment:
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
   hostname: kafka
   logging:
      driver: "none"
  es:
    image: elasticsearch:7.4.0
    container_name: es
    environment:
        - discovery.type=single-node
    networks:
        - service_mesh
        - mod_exp_network
        - batch_network
    expose:
        - "9200:9200"
    logging:
      driver: "none"

  batch:
    image: tp33/django
    container_name: batch
    networks:
        - batch_network
    depends_on:
      - es
    volumes:
      - .:/app
    command: bash -c "python ./batch/search_consumer.py && python ./batch/view_count.py && python ./batch/view_updater.py"
    restart: on-failure

  selenium-chrome:
    image: selenium/standalone-chrome
    container_name: selenium-chrome
    networks:
       - service_mesh
       - public
    expose:
       - "4444:4444"
    depends_on:
      - es

  selenium-test:
    image: tp33/django
    container_name: selenium-test
    networks:
       - service_mesh
    volumes:
       - ./selenium:/app
    command: bash -c "pip install selenium==3.141.0  &&   pip install requests && python selenium_tests.py"
    depends_on:
      - selenium-chrome



networks:
  backend:
  service_mesh:
  public:
  batch_network:
  mod_exp_network:
    

version: "3"
services:

  models:
    image: tp33/django
    container_name: models
    external_links:
      - mysql:db
    volumes:
      - .:/app
    expose:
      - "8000"
    networks:
      - backend
      - service_mesh
    command: bash -c "python ./isa/manage.py makemigrations  && python ./isa/manage.py migrate && python ./isa/manage.py loaddata ./isa/db.json && python ./isa/manage.py test jersey && mod_wsgi-express start-server --working-directory ./isa --reload-on-changes ./isa/isa/wsgi.py"

  exp:
    image: tp33/django
    container_name: exp
    networks: 
      - service_mesh
      - public
    expose:
      - "8000"
    # ports:
    #   - "8002:8000"
    volumes:
      - .:/app
    command: "mod_wsgi-express start-server --working-directory ./exp --reload-on-changes exp/exp/wsgi.py"
    logging:
      driver: "none"


  web:
    image: tp33/django
    container_name: web
    networks:
      - public
    expose:
      - "8000"
    # ports:
    #   - "8000:8000"
    volumes:
      - .:/app
    command: "mod_wsgi-express start-server --working-directory ./web --reload-on-changes web/web/wsgi.py"

  web2:
    image: tp33/django
    container_name: web2
    networks:
      - public
    expose:
      - "8000"
    volumes:
      - .:/app
    command: "mod_wsgi-express start-server --working-directory ./web --reload-on-changes web/web/wsgi.py"

  haproxy:
    image: haproxy:1.8
    container_name: haproxy
    depends_on:
      - web
      - web2
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - "80:80"
      - "1936:1936"
    networks:
      - public
    logging:
      driver: "none"

  kafka:
    image: spotify/kafka
    container_name: kafka
    networks:
      - batch_network
      - service_mesh
    environment:
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
    hostname: kafka
    logging:
      driver: "none"

  es:
    image: elasticsearch:7.4.0
    container_name: es
    environment:
      - discovery.type=single-node
    networks:
      - service_mesh
      - mod_exp_network
      - batch_network
    expose:
      - "9200"
    logging:
      driver: "none"

  batch:
    image: tp33/django
    container_name: batch
    networks:
      - batch_network
    depends_on:
      - es
    volumes:  
      - .:/app
    command: bash -c "python ./batch/search_consumer.py && python ./batch/view_count.py && python ./batch/view_updater.py"
    restart: on-failure

  # selenium-chrome:
  #   image: selenium/standalone-chrome
  #   container_name: selenium-chrome
  #   networks:
  #      - service_mesh
  #      - public
  #   expose:
  #      - "4444"
  #   depends_on:
  #     - es

  # selenium-test:
  #   image: tp33/django
  #   container_name: selenium-test
  #   networks:
  #      - service_mesh
  #   volumes:
  #      - ./selenium:/app
  #   command: bash -c "pip install selenium==3.141.0  &&   pip install requests && python selenium_tests.py"
  #   depends_on:
  #     - selenium-chrome
      
  spark-master:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.master.Master -h spark-master
    container_name: spark-master
    hostname: spark-master
    environment:
      MASTER: spark://spark-master:7077
      SPARK_CONF_DIR: /conf
    expose:
      - 7001
      - 7002
      - 7003
      - 7004
      - 7005
      - 7006
      - 7077
      - 6066
    ports:
      - 4040:4040
      - 6066:6066
      - 7077:7077
      - 8080:8080
    volumes:
      - ./batch:/tmp/data
    links:
      - models
    networks: 
      - service_mesh
    

  spark-worker:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    container_name: spark-worker
    hostname: spark-worker
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 512m
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8081:8081
    volumes:
      - ./batch:/tmp/data
    networks: 
      - service_mesh
    depends_on:
      - spark-master



networks:
  backend:
  service_mesh:
  public:
  batch_network:
  mod_exp_network:
    
